from typing import Any
from typing import Dict
from typing import NoReturn

import typer

from ._client import BitBucket
from ._constants import CLI_NAME
from ._constants import DEFAULT_TOKEN_FULLPATH
from ._exceptions import StashieExit

app = typer.Typer(name=CLI_NAME)
app_state: Dict[Any, Any] = {}


@app.command()
def pullrequests(author: str):
    ...


@app.command()
def placeholder(foo: str):
    ...


@app.callback()
def main(ctx: typer.Context, server: str, token_path=typer.Option(DEFAULT_TOKEN_FULLPATH), verbose: bool = False):
    typer.secho(typer.style("Stashie has been successfully loaded...", fg=typer.colors.GREEN), bold=True)
    typer.secho(f"Executing command: [{ctx.invoked_subcommand}]", fg=typer.colors.GREEN)
    typer.secho(f"Searching for bitbucket auth token in: {token_path=}")
    _ = BitBucket(server=server, token=_fetch_token(token_path))


def _fetch_token(file_path: str) -> str:
    with open(file_path) as token_file:
        token = token_file.read()
        if not token:
            _exit("Token file exists, however it does not contain a token.", exit_code=1)
        return token


def _exit(reason: str, exit_code: int) -> NoReturn:
    """
    Exits the command line app, stating the appropriate reason
    :param reason: The reason to write prior to quitting.
    :param exit_code: The exit code to return for quitting.
    :return: None
    """
    raise StashieExit(reason=reason, code=exit_code)

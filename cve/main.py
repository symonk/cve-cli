from typing import Any
from typing import Dict
from typing import NoReturn

import typer

from ._constants import CLI_NAME
from ._exceptions import Terminate

app = typer.Typer(name=CLI_NAME)
app_state: Dict[Any, Any] = {}


@app.command()
def users(user: int, include_status: bool = False):
    ...


@app.command()
def threads():
    ...


@app.callback()
def main(ctx: typer.Context):
    typer.secho(typer.style("cve has been successfully loaded...", fg=typer.colors.GREEN), bold=True)
    typer.secho(f"Executing command: [{ctx.invoked_subcommand}]", fg=typer.colors.GREEN)


def _fetch_token(file_path: str) -> str:
    with open(file_path) as token_file:
        token = token_file.read()
        if not token:
            _exit("Token file exists, however it does not contain a token.", code=1)
        return token


def _exit(reason: str, code: int) -> NoReturn:
    """
    Exits the command line app, stating the appropriate reason
    :param reason: The reason to write prior to quitting.
    :param code: The exit code to return for quitting.
    :return: None
    """
    raise Terminate(reason=reason, code=code)
